import { Fr, Fq, Point, Buffer32, Buffer128, Ptr } from '../types/index.js';
export declare class BarretenbergApiSync {
    pedersenCommit(inputsBuffer: Fr[]): Point;
    pedersenHash(inputsBuffer: Fr[], hashIndex: number): Fr;
    pedersenHashes(inputsBuffer: Fr[], hashIndex: number): Fr;
    pedersenHashBuffer(inputBuffer: Uint8Array, hashIndex: number): Fr;
    poseidon2Hash(inputsBuffer: Fr[]): Fr;
    poseidon2Hashes(inputsBuffer: Fr[]): Fr;
    poseidon2Permutation(inputsBuffer: Fr[]): Fr[];
    blake2s(data: Uint8Array): Buffer32;
    blake2sToField(data: Uint8Array): Fr;
    schnorrComputePublicKey(privateKey: Fr): Point;
    schnorrNegatePublicKey(publicKeyBuffer: Point): Point;
    schnorrConstructSignature(message: Uint8Array, privateKey: Fr): [Buffer32, Buffer32];
    schnorrVerifySignature(message: Uint8Array, pubKey: Point, sigS: Buffer32, sigE: Buffer32): boolean;
    schnorrMultisigCreateMultisigPublicKey(privateKey: Fq): Buffer128;
    schnorrMultisigValidateAndCombineSignerPubkeys(signerPubkeyBuf: Buffer128[]): [Point, boolean];
    schnorrMultisigConstructSignatureRound1(): [Buffer128, Buffer128];
    schnorrMultisigConstructSignatureRound2(message: Uint8Array, privateKey: Fq, signerRoundOnePrivateBuf: Buffer128, signerPubkeysBuf: Buffer128[], roundOnePublicBuf: Buffer128[]): [Fq, boolean];
    schnorrMultisigCombineSignatures(message: Uint8Array, signerPubkeysBuf: Buffer128[], roundOneBuf: Buffer128[], roundTwoBuf: Fq[]): [Buffer32, Buffer32, boolean];
    aesEncryptBufferCbc(input: Uint8Array, iv: Uint8Array, key: Uint8Array, length: number): Uint8Array;
    aesDecryptBufferCbc(input: Uint8Array, iv: Uint8Array, key: Uint8Array, length: number): Uint8Array;
    srsInitSrs(pointsBuf: Uint8Array, numPoints: number, g2PointBuf: Uint8Array): void;
    srsInitGrumpkinSrs(pointsBuf: Uint8Array, numPoints: number): void;
    examplesSimpleCreateAndVerifyProof(): boolean;
    testThreads(threads: number, iterations: number): number;
    commonInitSlabAllocator(circuitSize: number): void;
    acirGetCircuitSizes(constraintSystemBuf: Uint8Array, honkRecursion: boolean): [number, number, number];
    acirNewAcirComposer(sizeHint: number): Ptr;
    acirDeleteAcirComposer(acirComposerPtr: Ptr): void;
    acirCreateCircuit(acirComposerPtr: Ptr, constraintSystemBuf: Uint8Array, sizeHint: number): void;
    acirInitProvingKey(acirComposerPtr: Ptr, constraintSystemBuf: Uint8Array): void;
    acirCreateProof(acirComposerPtr: Ptr, constraintSystemBuf: Uint8Array, witnessBuf: Uint8Array): Uint8Array;
    acirProveAndVerifyUltraHonk(constraintSystemBuf: Uint8Array, witnessBuf: Uint8Array): boolean;
    acirProveAndVerifyMegaHonk(constraintSystemBuf: Uint8Array, witnessBuf: Uint8Array): boolean;
    acirFoldAndVerifyProgramStack(constraintSystemBuf: Uint8Array, witnessBuf: Uint8Array): boolean;
    acirLoadVerificationKey(acirComposerPtr: Ptr, vkBuf: Uint8Array): void;
    acirInitVerificationKey(acirComposerPtr: Ptr): void;
    acirGetVerificationKey(acirComposerPtr: Ptr): Uint8Array;
    acirGetProvingKey(acirComposerPtr: Ptr, acirVec: Uint8Array): Uint8Array;
    acirVerifyProof(acirComposerPtr: Ptr, proofBuf: Uint8Array): boolean;
    acirGetSolidityVerifier(acirComposerPtr: Ptr): string;
    acirSerializeProofIntoFields(acirComposerPtr: Ptr, proofBuf: Uint8Array, numInnerPublicInputs: number): Fr[];
    acirSerializeVerificationKeyIntoFields(acirComposerPtr: Ptr): [Fr[], Fr];
    acirProveUltraHonk(acirVec: Uint8Array, witnessVec: Uint8Array): Uint8Array;
    acirVerifyUltraHonk(proofBuf: Uint8Array, vkBuf: Uint8Array): boolean;
    acirWriteVkUltraHonk(acirVec: Uint8Array): Uint8Array;
    acirProofAsFieldsUltraHonk(proofBuf: Uint8Array): Fr[];
    acirVkAsFieldsUltraHonk(vkBuf: Uint8Array): Fr[];
}
