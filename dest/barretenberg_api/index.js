// WARNING: FILE CODE GENERATED BY BINDGEN UTILITY. DO NOT EDIT!
/* eslint-disable @typescript-eslint/no-unused-vars */
import { serializeBufferable } from '../serialize/index.js';
import { Fr, Point } from '../types/index.js';
import { NativeModules } from 'react-native';
const { BBSwiftModule } = NativeModules;

export class BarretenbergApiSync {
  pedersenCommit(inputsBuffer) {
    const inArgs = inputsBuffer.map(serializeBufferable);
    const resultArray = BBSwiftModule.pedersenCommit(inArgs);
    if (!resultArray) {
      throw new Error('pedersenCommit returned null or encountered an error');
    }
    const resultBuffer = Buffer.from(resultArray);
    return Point.fromBuffer(resultBuffer);
  }
  pedersenHash(inputsBuffer, hashIndex) {
    console.log('inputsBuffer: ', inputsBuffer);
    const inArgs = [inputsBuffer].map(serializeBufferable);
    console.log('inArgs: ', inArgs);

    console.log('NativeModules: ', NativeModules);
    console.log('BBSwiftModule: ', BBSwiftModule);

    // if (typeof BBSwiftModule.pedersenHash === 'function') {
    //   console.log('Method exists:');
    // } else {
    //   console.log('pedersenHash is undefined on BBSwift');
    // }
    const resultBuffer = BBSwiftModule.pedersenHash(inArgs);
    console.log('resultBuffer: ', resultBuffer);
    if (!resultBuffer) {
      throw new Error('pedersenHash returned null');
    }
    return Fr.fromBuffer(resultBuffer);
  }
  pedersenHashes(inputsBuffer, hashIndex) {
    throw new Error('pedersenHashes not supported');
  }
  pedersenHashBuffer(inputBuffer, hashIndex) {
    throw new Error('pedersenHashBuffer not supported');
  }
  poseidon2Hash(inputsBuffer) {
    const inArgs = [inputsBuffer].map(serializeBufferable);
    const resultBuffer = BBSwiftModule.poseidon2Hash(inArgs);
    if (!resultBuffer) {
      throw new Error('poseidon2Hash returned null');
    }
    return Fr.fromBuffer(resultBuffer);
  }
  poseidon2Hashes(inputsBuffer) {
    throw new Error('poseidon2Hashes not supported');
  }
  poseidon2Permutation(inputsBuffer) {
    throw new Error('poseidon2Permutation not supported');
  }
  blake2s(data) {
    throw new Error('blake2s not supported');
  }
  blake2sToField(data) {
    throw new Error('blake2sToField not supported');
  }
  schnorrComputePublicKey(privateKey) {
    throw new Error('schnorrComputePublicKey not supported');
  }
  schnorrNegatePublicKey(publicKeyBuffer) {
    throw new Error('schnorrNegatePublicKey not supported');
  }
  schnorrConstructSignature(message, privateKey) {
    throw new Error('schnorrConstructSignature not supported');
  }
  schnorrVerifySignature(message, pubKey, sigS, sigE) {
    throw new Error('schnorrVerifySignature not supported');
  }
  schnorrMultisigCreateMultisigPublicKey(privateKey) {
    throw new Error('schnorrMultisigCreateMultisigPublicKey not supported');
  }
  schnorrMultisigValidateAndCombineSignerPubkeys(signerPubkeyBuf) {
    throw new Error(
      'schnorrMultisigValidateAndCombineSignerPubkeys not supported'
    );
  }
  schnorrMultisigConstructSignatureRound1() {
    throw new Error('schnorrMultisigConstructSignatureRound1 not supported');
  }
  schnorrMultisigConstructSignatureRound2(
    message,
    privateKey,
    signerRoundOnePrivateBuf,
    signerPubkeysBuf,
    roundOnePublicBuf
  ) {
    throw new Error('schnorrMultisigConstructSignatureRound2 not supported');
  }
  schnorrMultisigCombineSignatures(
    message,
    signerPubkeysBuf,
    roundOneBuf,
    roundTwoBuf
  ) {
    throw new Error('schnorrMultisigCombineSignatures not supported');
  }
  aesEncryptBufferCbc(input, iv, key, length) {
    throw new Error('aesEncryptBufferCbc not supported');
  }
  aesDecryptBufferCbc(input, iv, key, length) {
    throw new Error('aesDecryptBufferCbc not supported');
  }
  srsInitSrs(pointsBuf, numPoints, g2PointBuf) {
    throw new Error('srsInitSrs not supported');
  }
  srsInitGrumpkinSrs(pointsBuf, numPoints) {
    throw new Error('srsInitGrumpkinSrs not supported');
  }
  examplesSimpleCreateAndVerifyProof() {
    throw new Error('examplesSimpleCreateAndVerifyProof not supported');
  }
  testThreads(threads, iterations) {
    throw new Error('testThreads not supported');
  }
  commonInitSlabAllocator(circuitSize) {
    throw new Error('commonInitSlabAllocator not supported');
  }
  acirGetCircuitSizes(constraintSystemBuf, honkRecursion) {
    throw new Error('acirGetCircuitSizes not supported');
  }
  acirNewAcirComposer(sizeHint) {
    throw new Error('acirNewAcirComposer not supported');
  }
  acirDeleteAcirComposer(acirComposerPtr) {
    throw new Error('acirDeleteAcirComposer not supported');
  }
  acirCreateCircuit(acirComposerPtr, constraintSystemBuf, sizeHint) {
    throw new Error('acirCreateCircuit not supported');
  }
  acirInitProvingKey(acirComposerPtr, constraintSystemBuf) {
    throw new Error('acirInitProvingKey not supported');
  }
  acirCreateProof(acirComposerPtr, constraintSystemBuf, witnessBuf) {
    throw new Error('acirCreateProof not supported');
  }
  acirProveAndVerifyUltraHonk(constraintSystemBuf, witnessBuf) {
    throw new Error('acirProveAndVerifyUltraHonk not supported');
  }
  acirProveAndVerifyMegaHonk(constraintSystemBuf, witnessBuf) {
    throw new Error('acirProveAndVerifyMegaHonk not supported');
  }
  acirFoldAndVerifyProgramStack(constraintSystemBuf, witnessBuf) {
    throw new Error('acirFoldAndVerifyProgramStack not supported');
  }
  acirLoadVerificationKey(acirComposerPtr, vkBuf) {
    throw new Error('acirLoadVerificationKey not supported');
  }
  acirInitVerificationKey(acirComposerPtr) {
    throw new Error('acirInitVerificationKey not supported');
  }
  acirGetVerificationKey(acirComposerPtr) {
    throw new Error('acirGetVerificationKey not supported');
  }
  acirGetProvingKey(acirComposerPtr, acirVec) {
    throw new Error('acirGetProvingKey not supported');
  }
  acirVerifyProof(acirComposerPtr, proofBuf) {
    throw new Error('acirVerifyProof not supported');
  }
  acirGetSolidityVerifier(acirComposerPtr) {
    throw new Error('acirGetSolidityVerifier not supported');
  }
  acirSerializeProofIntoFields(
    acirComposerPtr,
    proofBuf,
    numInnerPublicInputs
  ) {
    throw new Error('acirSerializeProofIntoFields not supported');
  }
  acirSerializeVerificationKeyIntoFields(acirComposerPtr) {
    throw new Error('acirSerializeVerificationKeyIntoFields not supported');
  }
  acirProveUltraHonk(acirVec, witnessVec) {
    throw new Error('acirProveUltraHonk not supported');
  }
  acirVerifyUltraHonk(proofBuf, vkBuf) {
    throw new Error('acirVerifyUltraHonk not supported');
  }
  acirWriteVkUltraHonk(acirVec) {
    throw new Error('acirWriteVkUltraHonk not supported');
  }
  acirProofAsFieldsUltraHonk(proofBuf) {
    throw new Error('acirProofAsFieldsUltraHonk not supported');
  }
  acirVkAsFieldsUltraHonk(vkBuf) {
    throw new Error('acirVkAsFieldsUltraHonk not supported');
  }
}
//# sourceMappingURL=index.js.map
